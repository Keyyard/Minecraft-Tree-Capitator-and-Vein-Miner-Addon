{"version":3,"sources":["../../scripts/main.ts","../../scripts/keyyard/processor.ts","../../scripts/keyyard/data.ts","../../scripts/keyyard/activation.ts","../../scripts/optionMenu.ts","../../scripts/utils.ts"],"sourcesContent":["import { world } from \"@minecraft/server\";\r\nimport { Activation } from \"./keyyard/activation\";\r\nimport { OptionMenu } from \"./optionMenu\";\r\nimport { onFirstJoin } from \"./utils\";\r\n\r\nworld.afterEvents.itemUse.subscribe(({ itemStack, source }) => {\r\n  const Option = new OptionMenu();\r\n  if (itemStack.typeId == `keyyard:option_controller`) {\r\n    Option.optionMenu(source);\r\n  }\r\n});\r\n\r\nworld.beforeEvents.playerBreakBlock.subscribe(({ block, dimension, itemStack, player }) => {\r\n  const activation = new Activation();\r\n  if (player.isSneaking && player.getTags().includes(`TreeActive`))\r\n    activation.treeCapitatorActivate({ block, dimension, itemStack, player });\r\n  if (player.isSneaking && player.getTags().includes(`VeinActive`))\r\n    activation.veinMinerActivate({ block, dimension, itemStack, player });\r\n});\r\n\r\nworld.afterEvents.playerSpawn.subscribe(({ player, initialSpawn }) => {\r\n  if (initialSpawn) onFirstJoin(player);\r\n  const Tags = [\"TreeActive\", \"VeinActive\", \"TreeInactive\", \"VeinInactive\"];\r\n  if (!player.getTags().some((tag) => Tags.includes(tag))) {\r\n    player.addTag(\"TreeActive\");\r\n    player.addTag(\"VeinActive\");\r\n  }\r\n});\r\n","import {\r\n  Block,\r\n  Container,\r\n  Enchantment,\r\n  EntityInventoryComponent,\r\n  ItemDurabilityComponent,\r\n  ItemEnchantableComponent,\r\n  ItemStack,\r\n  Player,\r\n  system,\r\n  Vector3,\r\n} from \"@minecraft/server\";\r\nimport { blockData } from \"./data\";\r\n\r\nfunction breakBlock(block: Block, fortuneLevel: number, hasSilkTouch: boolean) {\r\n  const blockInfo = blockData.get(block.typeId);\r\n  let dropCount = 1;\r\n  if (!blockInfo) return;\r\n  if (hasSilkTouch) {\r\n    const itemStack = new ItemStack(block.typeId, 1);\r\n    block.dimension.spawnItem(itemStack, block.location);\r\n  } else {\r\n    dropCount = fortuneLevel > 0 ? randomNum(0, fortuneLevel) + 1 : 1;\r\n    for (let i = 0; i < dropCount; i++) {\r\n      const itemStack = new ItemStack(blockInfo.item, blockInfo.itemPerLevel);\r\n      block.dimension.spawnItem(itemStack, block.location);\r\n    }\r\n  }\r\n  block.setType(\"minecraft:air\");\r\n}\r\n\r\nfunction applyDurabilityDamage(player: Player, item: ItemStack, inventory: any, slotIndex: number) {\r\n  const durabilityComponent = item.getComponent(ItemDurabilityComponent.componentId) as ItemDurabilityComponent;\r\n  if (durabilityComponent) {\r\n    const { unbreakingLevel } = getRelevantEnchantments(item);\r\n    if (Math.random() < 1 / (unbreakingLevel + 1)) {\r\n      durabilityComponent.damage += 1;\r\n      if (durabilityComponent.damage >= durabilityComponent.maxDurability) {\r\n        inventory.container.setItem(slotIndex, undefined);\r\n        player.playSound(\"random.break\");\r\n      } else {\r\n        inventory.container.setItem(slotIndex, item);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getRelevantEnchantments(item: ItemStack) {\r\n  let unbreakingLevel = 0;\r\n  let hasSilkTouch = false;\r\n  let fortuneLevel = 0;\r\n  const enchantableComponent = item.getComponent(\"minecraft:enchantable\") as ItemEnchantableComponent;\r\n  if (enchantableComponent) {\r\n    const enchantments = enchantableComponent.getEnchantments() as Enchantment[];\r\n    for (const enchant of enchantments) {\r\n      switch (enchant.type.id) {\r\n        case \"unbreaking\":\r\n          unbreakingLevel = enchant.level;\r\n          break;\r\n        case \"silk_touch\":\r\n          hasSilkTouch = true;\r\n          break;\r\n        case \"fortune\":\r\n          fortuneLevel = enchant.level;\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  return { unbreakingLevel, hasSilkTouch, fortuneLevel };\r\n}\r\n\r\nfunction randomNum(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nclass BlockProcessor {\r\n  static processBlock(\r\n    player: Player,\r\n    block: Block,\r\n    item: ItemStack,\r\n    isRecursive: boolean,\r\n    blockData: { level: number; item: string; itemPerLevel: number; chance: number },\r\n    unbreakingLevel: number,\r\n    fortuneLevel: number,\r\n    hasSilkTouch: boolean\r\n  ) {\r\n    const durabilityComponent = item.getComponent(ItemDurabilityComponent.componentId) as ItemDurabilityComponent;\r\n    let currentLevel = durabilityComponent.damage;\r\n    const processedBlocks = new Set();\r\n\r\n    if (isRecursive && BlockProcessor.shouldContinueProcessing(unbreakingLevel)) {\r\n      currentLevel++;\r\n      if (currentLevel >= durabilityComponent.maxDurability) {\r\n        return;\r\n      } else {\r\n        system.runTimeout(() => {\r\n          const inventoryComp = player.getComponent(\"inventory\") as EntityInventoryComponent;\r\n          const inventory = inventoryComp.container as Container;\r\n          const selectedItem = inventory.getItem(player.selectedSlotIndex);\r\n          if (selectedItem) {\r\n            applyDurabilityDamage(player, selectedItem, inventory, player.selectedSlotIndex);\r\n          }\r\n        }, 1);\r\n      }\r\n      const targetPerm = block.permutation;\r\n      const array = [block];\r\n\r\n      function filterOtherBlock(other: Block) {\r\n        if (other && other.isValid() && other.permutation.matches(targetPerm.type.id) && !processedBlocks.has(other)) {\r\n          array.push(other);\r\n          processedBlocks.add(other);\r\n        }\r\n      }\r\n\r\n      function* process() {\r\n        let element;\r\n        do {\r\n          element = array.shift();\r\n          if (element) {\r\n            const aboveBlock = element.above();\r\n            if (aboveBlock) filterOtherBlock(aboveBlock);\r\n\r\n            const southBlock = element.south();\r\n            if (southBlock) filterOtherBlock(southBlock);\r\n\r\n            const northBlock = element.north();\r\n            if (northBlock) filterOtherBlock(northBlock);\r\n\r\n            const eastBlock = element.east();\r\n            if (eastBlock) filterOtherBlock(eastBlock);\r\n\r\n            const westBlock = element.west();\r\n            if (westBlock) filterOtherBlock(westBlock);\r\n          }\r\n          if (element) {\r\n            const elementItemStack = element.getItemStack(1, true);\r\n            if (elementItemStack) {\r\n              breakBlock(element, fortuneLevel, hasSilkTouch);\r\n            }\r\n          }\r\n          yield;\r\n        } while (array.length > 0);\r\n      }\r\n\r\n      processedBlocks.add(block);\r\n      system.runJob(process());\r\n    }\r\n  }\r\n\r\n  static isDenied(location: Vector3, processedBlocks: Block[]) {\r\n    return processedBlocks.some(\r\n      (processedBlock: { x: number; y: number; z: number }) =>\r\n        location.x === processedBlock.x && location.y === processedBlock.y && location.z === processedBlock.z\r\n    );\r\n  }\r\n\r\n  static shouldContinueProcessing(unbreakingLevel: number) {\r\n    const randomValue = randomNum(0, 100);\r\n    switch (unbreakingLevel) {\r\n      case 1:\r\n        return randomValue > 20;\r\n      case 2:\r\n        return randomValue > 33.3;\r\n      case 3:\r\n        return randomValue > 50;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n}\r\n\r\nexport class TreeCapitator {\r\n  static startChopping(player: Player, block: Block, item: ItemStack, isRecursive: boolean) {\r\n    const durabilityComponent = item.getComponent(ItemDurabilityComponent.componentId);\r\n    if (!durabilityComponent) return;\r\n\r\n    const { unbreakingLevel, hasSilkTouch, fortuneLevel } = getRelevantEnchantments(item);\r\n    const logData = blockData.get(block.typeId);\r\n    if (!logData || this.getAxeLevel(item) < logData.level) return;\r\n\r\n    BlockProcessor.processBlock(player, block, item, isRecursive, logData, unbreakingLevel, fortuneLevel, hasSilkTouch);\r\n  }\r\n\r\n  static getAxeLevel(item: ItemStack) {\r\n    switch (item.typeId) {\r\n      case \"minecraft:wooden_axe\":\r\n      case \"minecraft:stone_axe\":\r\n        return 1;\r\n      case \"minecraft:iron_axe\":\r\n        return 3;\r\n      case \"minecraft:diamond_axe\":\r\n        return 4;\r\n      case \"minecraft:netherite_axe\":\r\n        return 5;\r\n      default:\r\n        return 5;\r\n    }\r\n  }\r\n}\r\n\r\nexport class VeinMiner {\r\n  static startMining(player: Player, block: Block, item: ItemStack, isRecursive: boolean) {\r\n    const durabilityComponent = item.getComponent(ItemDurabilityComponent.componentId);\r\n    if (!durabilityComponent) return;\r\n\r\n    const { unbreakingLevel, fortuneLevel, hasSilkTouch } = getRelevantEnchantments(item);\r\n    const oreData = blockData.get(block.typeId);\r\n    if (!oreData || this.getPickaxeLevel(item) < oreData.level) return;\r\n\r\n    BlockProcessor.processBlock(player, block, item, isRecursive, oreData, unbreakingLevel, fortuneLevel, hasSilkTouch);\r\n  }\r\n\r\n  static getPickaxeLevel(item: ItemStack) {\r\n    switch (item.typeId) {\r\n      case \"minecraft:wooden_pickaxe\":\r\n      case \"minecraft:stone_pickaxe\":\r\n        return 1;\r\n      case \"minecraft:iron_pickaxe\":\r\n        return 3;\r\n      case \"minecraft:diamond_pickaxe\":\r\n        return 4;\r\n      case \"minecraft:netherite_pickaxe\":\r\n        return 5;\r\n      default:\r\n        return 5;\r\n    }\r\n  }\r\n}\r\n","export const blockData = new Map([\r\n  // logs\r\n  [\"minecraft:oak_log\", { level: 1, item: \"minecraft:oak_log\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:spruce_log\", { level: 1, item: \"minecraft:spruce_log\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:birch_log\", { level: 1, item: \"minecraft:birch_log\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:jungle_log\", { level: 1, item: \"minecraft:jungle_log\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:acacia_log\", { level: 1, item: \"minecraft:acacia_log\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:dark_oak_log\", { level: 1, item: \"minecraft:dark_oak_log\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:mangrove_log\", { level: 1, item: \"minecraft:mangrove_log\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:cherry_log\", { level: 1, item: \"minecraft:cherry_log\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:crimson_stem\", { level: 1, item: \"minecraft:crimson_stem\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:warped_stem\", { level: 1, item: \"minecraft:warped_stem\", itemPerLevel: 1, chance: 0.33 }],\r\n  // ores\r\n  [\"minecraft:coal_ore\", { level: 1, item: \"minecraft:coal\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:deepslate_coal_ore\", { level: 1, item: \"minecraft:coal\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:copper_ore\", { level: 1, item: \"minecraft:raw_copper\", itemPerLevel: 5, chance: 0.33 }],\r\n  [\"minecraft:deepslate_copper_ore\", { level: 1, item: \"minecraft:raw_copper\", itemPerLevel: 5, chance: 0.33 }],\r\n  [\"minecraft:iron_ore\", { level: 2, item: \"minecraft:raw_iron\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:deepslate_iron_ore\", { level: 2, item: \"minecraft:raw_iron\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:gold_ore\", { level: 3, item: \"minecraft:raw_gold\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:deepslate_gold_ore\", { level: 3, item: \"minecraft:raw_gold\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:redstone_ore\", { level: 2, item: \"minecraft:redstone\", itemPerLevel: 9, chance: 0.33 }],\r\n  [\"minecraft:deepslate_redstone_ore\", { level: 2, item: \"minecraft:redstone\", itemPerLevel: 9, chance: 0.33 }],\r\n  [\"minecraft:lapis_ore\", { level: 2, item: \"minecraft:lapis_lazuli\", itemPerLevel: 9, chance: 0.33 }],\r\n  [\"minecraft:deepslate_lapis_ore\", { level: 2, item: \"minecraft:lapis_lazuli\", itemPerLevel: 9, chance: 0.33 }],\r\n  [\"minecraft:diamond_ore\", { level: 3, item: \"minecraft:diamond\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:deepslate_diamond_ore\", { level: 3, item: \"minecraft:diamond\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:emerald_ore\", { level: 3, item: \"minecraft:emerald\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:deepslate_emerald_ore\", { level: 3, item: \"minecraft:emerald\", itemPerLevel: 1, chance: 0.33 }],\r\n  [\"minecraft:nether_gold_ore\", { level: 2, item: \"minecraft:gold_nugget\", itemPerLevel: 6, chance: 0.33 }],\r\n  [\"minecraft:quartz_ore\", { level: 2, item: \"minecraft:quartz\", itemPerLevel: 1, chance: 0.33 }],\r\n]);\r\n","import { TreeCapitator, VeinMiner } from \"./processor\";\r\nimport { Entity, Player, system, world, EquipmentSlot, EntityEquippableComponent } from \"@minecraft/server\";\r\n\r\nexport class Activation {\r\n  /**\r\n   * Activates the tree capitator functionality.\r\n   */\r\n  treeCapitatorActivate(data: any) {\r\n    const { block, dimension, itemStack, player } = data;\r\n    if (!itemStack) return;\r\n\r\n    const mainhand = player\r\n      .getComponent(EntityEquippableComponent.componentId)\r\n      .getEquipmentSlot(EquipmentSlot.Mainhand);\r\n    const item = mainhand.getItem();\r\n    const splitId = item.typeId.split(\":\")[1].split(\"_\")[1];\r\n    if (!item) return;\r\n    if(splitId == `axe`) TreeCapitator.startChopping(player, block, item, dimension);\r\n  }\r\n\r\n  /**\r\n   * Activates the vein miner functionality.\r\n   */\r\n  veinMinerActivate(data: any) {\r\n    const { block, dimension, itemStack, player } = data;\r\n    if (!itemStack) return;\r\n\r\n    const mainhand = player\r\n      .getComponent(EntityEquippableComponent.componentId)\r\n      .getEquipmentSlot(EquipmentSlot.Mainhand);\r\n    const item = mainhand.getItem();\r\n    if (!item) return;\r\n    const splitId = item.typeId.split(\":\")[1].split(\"_\")[1];\r\n    if (!item) return;\r\n    if(splitId == `pickaxe`) VeinMiner.startMining(player, block, item, dimension);\r\n  }\r\n  /**\r\n   * Activates the both functionality.\r\n   */\r\n  bothActivate(data: any) {\r\n    const { block, dimension, itemStack, player } = data;\r\n    if (!itemStack) return;\r\n\r\n    const mainhand = player\r\n      .getComponent(EntityEquippableComponent.componentId)\r\n      .getEquipmentSlot(EquipmentSlot.Mainhand);\r\n    const item = mainhand.getItem();\r\n    if (!item) return;\r\n\r\n    TreeCapitator.startChopping(player, block, item, dimension);\r\n    VeinMiner.startMining(player, block, item, dimension);\r\n  }\r\n}\r\n","import { Player } from \"@minecraft/server\";\r\nimport { ModalFormData } from \"@minecraft/server-ui\";\r\n\r\nexport class OptionMenu {\r\n  optionMenu(player: Player) {\r\n    const treeActive = player.hasTag(\"TreeActive\");\r\n    const veinActive = player.hasTag(\"VeinActive\");\r\n\r\n    const optionForm = new ModalFormData()\r\n      .title(\"Tree Captivator & Vein Miner Options\")\r\n      .toggle(\"Tree Captivator\", treeActive)\r\n      .toggle(\"Vein Miner\", veinActive);\r\n\r\n    optionForm.show(player).then((formData) => {\r\n      if (formData.formValues === undefined) return;\r\n\r\n      const [treeSelected, veinSelected] = formData.formValues.map((value) => Boolean(value));\r\n\r\n      this.updateTags(player, \"TreeActive\", \"TreeInactive\", treeSelected);\r\n      this.updateTags(player, \"VeinActive\", \"VeinInactive\", veinSelected);\r\n    });\r\n  }\r\n  private updateTags(player: Player, activeTag: string, inactiveTag: string, isActive: boolean) {\r\n    if (isActive) {\r\n      player.addTag(activeTag);\r\n      player.removeTag(inactiveTag);\r\n    } else {\r\n      player.removeTag(activeTag);\r\n      player.addTag(inactiveTag);\r\n    }\r\n  }\r\n}\r\n","import { PaletteColor, Player, system } from \"@minecraft/server\";\r\n\r\n// Message templates for different scenarios\r\nclass MessageTemplates {\r\n  static readonly FIRST_JOIN_MESSAGES = [\r\n    \"<Keyyard> Hey there! You have successfully applied Tree Capitator and Vein Miner addon to your world.\",\r\n    \"<Keyyard> To use Tree Capitator, hold an axe and break the bottom block of a tree while sneaking.\",\r\n    \"<Keyyard> To use Vein Miner, hold a pickaxe and break a block while sneaking.\",\r\n    `<Keyyard> You can use the \"Option Controller\" item to activate or deactivate these features.`,\r\n    \"<Keyyard> There will be more features coming soon!\",\r\n    \"<Keyyard> Follow us on \\xA7cYou\\xA7fTube\\xA7r Keyyard, \\xA7bTwitter\\xA7r @Keyyard, \\xA7cYou\\xA7fTube\\xA7r Beyond64\",\r\n    \"<Keyyard> Join our community discord server: \\xA7bhttps://discord.gg/s2VfQr69uz , \\xA7bhttps://discord.gg/cdZA3bccQk\",\r\n    \"<Keyyard> Have fun playing!\",\r\n  ];\r\n\r\n  static readonly RETURNING_PLAYER_MESSAGES = [\r\n    \"<Keyyard> Follow us on \\xA7cYou\\xA7fTube\\xA7r Keyyard, \\xA7bTwitter\\xA7r @Keyyard, \\xA7cYou\\xA7fTube\\xA7r Beyond64\",\r\n    \"<Keyyard> Join our community discord server: \\xA7bhttps://discord.gg/s2VfQr69uz , \\xA7bhttps://discord.gg/cdZA3bccQk\",\r\n    \"<Keyyard> Have fun playing!\",\r\n  ];\r\n}\r\n\r\n// Player state management\r\nclass PlayerStateManager {\r\n  private static readonly FIRST_JOIN_TAG = \"tcvm_first_joined\";\r\n\r\n  static isFirstTimePlayer(player: Player): boolean {\r\n    return !player.hasTag(this.FIRST_JOIN_TAG);\r\n  }\r\n\r\n  static markAsJoined(player: Player): void {\r\n    if (!player.hasTag(this.FIRST_JOIN_TAG)) {\r\n      player.addTag(this.FIRST_JOIN_TAG);\r\n    }\r\n  }\r\n}\r\n\r\n// Notification system for delayed messages with sound effects\r\nclass NotificationSystem {\r\n  private static readonly BASE_DELAY = 100;\r\n  private static readonly MESSAGE_INTERVAL = 150;\r\n  private static readonly NOTIFICATION_SOUND = \"random.orb\";\r\n\r\n  static sendDelayedMessages(player: Player, messages: string[]): void {\r\n    messages.forEach((message, index) => {\r\n      const delay = this.BASE_DELAY + index * this.MESSAGE_INTERVAL;\r\n\r\n      system.runTimeout(() => {\r\n        this.sendNotificationWithSound(player, message);\r\n      }, delay);\r\n    });\r\n  }\r\n\r\n  private static sendNotificationWithSound(player: Player, message: string): void {\r\n    player.sendMessage(message);\r\n    player.dimension.playSound(this.NOTIFICATION_SOUND, player.location);\r\n  }\r\n}\r\n\r\n// Main handler for player join events\r\nclass PlayerJoinHandler {\r\n  static handlePlayerJoin(player: Player): void {\r\n    const isFirstTime = PlayerStateManager.isFirstTimePlayer(player);\r\n\r\n    if (isFirstTime) {\r\n      this.handleFirstTimeJoin(player);\r\n    } else {\r\n      this.handleReturningPlayerJoin(player);\r\n    }\r\n  }\r\n\r\n  private static handleFirstTimeJoin(player: Player): void {\r\n    NotificationSystem.sendDelayedMessages(player, MessageTemplates.FIRST_JOIN_MESSAGES);\r\n    PlayerStateManager.markAsJoined(player);\r\n  }\r\n\r\n  private static handleReturningPlayerJoin(player: Player): void {\r\n    NotificationSystem.sendDelayedMessages(player, MessageTemplates.RETURNING_PLAYER_MESSAGES);\r\n  }\r\n}\r\n\r\n// Public API - maintains backward compatibility\r\nexport function onFirstJoin(player: Player): void {\r\n  PlayerJoinHandler.handlePlayerJoin(player);\r\n}\r\n"],"mappings":"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","names":["world","blockData","filterOtherBlock","system","world"],"file":"../scripts/main.js"}